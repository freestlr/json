#!/usr/bin/env node

var util = require('util')
var fs   = require('fs')
var vm   = require('vm')

var opt = {
	depth  : null,
	length : 9001,
	colors : process.stdout.isTTY
}
var pre = {
	armap  : '_abcdefghijklmnopqrstuvw'.split(''),
	exec   : false,
	raw    : false,
	sleep  : 0,
}
var run = {
	context: null,
	objects: [{ name: ':stdin:' }],
}


function warn(text) {
	opt.verbose && process.stderr.write(text +'\n')
}

function usage() {
	return ['Usage: '+ process.argv[1] +' [OPTIONS]* [FILE]* [CODE]*',
		'',
		'	FILE      if FILE is not readable, treat it as CODE',
		'	          interpret FILE as json, if no luck - split to array of strings',
		'	          each FILE gets its own variable "[a-z]" in order of appearance',
		'	          stdin gets variable "_"',
		'	CODE      javascript code executed in context of loaded files',
		'	-e FILE   execute js FILE within current context',
		'	-r FILE   raw, don\'t parse file in any way',
		'',
		'	-h   show this help',
		'	-s   stringify output',
		'	-f   format output',
		'	-w   write output to first FILE specified ("a" FILE)',
		'	-d   dump inline scripts and script FILEs given by -e',
		'	-u   unwrap output string from "quotes" or join output array by \\n',
		'	-0   when -u used and output is array, join lines by \\0',
		'	-v   verbose, show some process messages',
		'	-n   don\'t add newline at end of output',
		'	-l N shrink arrays exceeding N elements, default: over nine thousand',
		'	-z N set inspection depth to N, default null = full depth',
		'	-c   enable colors output, by default colors enabled for TTY',
		'	-C   no colors',
		''
	].join('\n')
}

// node ~/bin/json ...
var argv = process.argv.slice(2)
while(argv.length) {
	var a = argv.shift()

	if(/^-[a-zA-Z0]+$/.test(a)) { // -oPts
		var o, opts = a.slice(1).split('')

		while(o = opts.pop()) switch(o) {
			case 'h': opt.usage   = true          ;break
			case 's': opt.string  = true          ;break
			case '0': opt.zero    = true          ;break
			case 'f': opt.format  = true          ;break
			case 'w': opt.write   = true          ;break
			case 'd': opt.dump    = true          ;break
			case 'u': opt.unwrap  = true          ;break
			case 'v': opt.verbose = true          ;break
			case 'n': opt.noeofnl = true          ;break
			case 'c': opt.colors  = true          ;break
			case 'C': opt.colors  = false         ;break
			case 'l': opt.length  = +argv.shift() ;break
			case 'z': opt.depth   = +argv.shift() ;break
			case 'e': pre.exec    = true          ;break
			case 'r': pre.raw     = true          ;break

			default:
				warn('Unrecognised option: -'+ o)
		}

	} else add_object(a)
}

function add_object(string) {
	var object = {
		index: run.objects.length,
		file: true,
		exec: pre.exec,
		raw: pre.raw
	}

	fs.stat(string, function(err, stat) {
		if(err || !(stat.isFile() || stat.isFIFO())) {
			object.name = 'commandline #'+ object.index
			object.data = string
			object.file = false
			object.exec = true
			return check_n_go()
		}

		fs.readFile(string, function(err, data) {
			if(err) {
				warn('Error reading file "'+ string +'": '+ err)

			} else {
				object.name = string
				object.data = data +''
			}
			check_n_go()
		})
	})

	pre.sleep++
	pre.exec = false
	pre.raw = false
	run.objects.push(object)
}


if(!process.stdin.isTTY) {
	pre.sleep++

	process.stdin.on('readable', function() {
		run.objects[0].data += process.stdin.read() || ''
	})

	process.stdin.on('end', check_n_go)
}

function check_n_go() {
	--pre.sleep || go()
}

if(opt.usage || !pre.sleep) {
	process.stderr.write(usage())
	process.exit(1)
}

function go() {
	run.context = vm.createContext({})
	run.context.warn = warn
	run.context.run  = run

	for(var i = 0; i < run.objects.length; i++) {
		var object = run.objects[i]

		object.argument = pre.armap[i] || '$'+ object.index

		if(object.exec) {
			var func = new vm.Script(object.data, { filename: object.name })

			try {
				object.output = func.runInContext(run.context)
			} catch(e) {
				object.output = e
			}

		} else if(object.file) {

			if(object.raw) {
				object.output = object.data
			} else if(object.data) try {
				object.output = JSON.parse(object.data)
			} catch(err) {
				object.error  = err
				object.output = object.data.split(/\r?\n/).filter(Boolean)
			} else {
				object.output = null
			}
		}

		run.context.$ = run.context[object.argument] = object.output
	}

	if(run.context.$ === undefined) {
		run.output = run.context._ || run.context.a
	} else {
		run.output = run.context.$
	}

	if(opt.dump) {
		run.result = run.objects.map(function(o) { return o.exec ? o.data : '' }).join('\n')
	} else if(opt.format) {
		run.result = format(run.output)
	} else if(opt.string || opt.write) {
		run.result = JSON.stringify(run.output)
	} else if(opt.unwrap && 'string' === typeof run.output) {
		run.result = run.output
	} else if(opt.unwrap && '[object Array]' === Object.prototype.toString.call(run.output)) {
		run.result = run.output.join(opt.zero ? '\0' : '\n')
	} else {
		run.result = util.inspect(run.output, {
			colors : opt.colors,
			depth  : opt.depth,
			maxArrayLength: opt.length
		})
	}
	if(!opt.noeofnl && !opt.zero) run.result += '\n'

	if(opt.write) {
		var file = run.objects[1]
		fs.writeFileSync(file.name, run.result)
	} else {
		process.stdout.write(run.result)
	}
}

function format(object, tab, size, level, field, drop) {
	level = level |0
	tab   = tab  || '\t'
	size  = size || 100
	drop  = drop || []

	var indent = Array(level +1).join(tab || '\t')
	,   string

	if(object && typeof object === 'object') {
		if(typeof Node !== 'undefined' && object instanceof Node) {
			return null
		}
		if(drop.indexOf(object) !== -1) {
			return null
		}
		drop.push(object)

		try {
			var split = JSON.stringify(object).length > size

		} catch(e) { return null }


		var fields = []
		,   joint = split ? ',\n': ', '
		,   lnext = split ? level +1 : 0
		,   type = Object.prototype.toString.call(object)
		,   brackets

		if(type === '[object Array]') {
			brackets = '[]'
			for(var i = 0; i < object.length; i++) {
				var item = format(object[i], tab, size, lnext, null, drop)
				fields.push(item)
			}

		} else {
			brackets = '{}'
			for(var name in object) {
				var item = format(object[name], tab, size, lnext, name, drop)
				if(item) fields.push(item)
			}
		}

		if(split) {
			string = brackets[0] +'\n'+ fields.join(joint) +'\n'+ indent + brackets[1]

		} else {
			string = brackets[0] + fields.join(joint) + brackets[1]
		}

	} else switch(typeof object) {

		case 'object':
		case 'boolean':
		case 'number':
			string = object
		break

		case 'string':
			string = JSON.stringify(object)
		break

		default:
		case 'function':
		case 'undefined':
			return null
	}

	return indent +(field ? JSON.stringify(field) +': ' : '')+ string
}

// vim:set ft=javascript:
